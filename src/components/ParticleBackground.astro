---

---

<canvas id="particle-canvas"></canvas>

<style>
  #particle-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    image-rendering: pixelated;
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
  }
</style>

<script>
  class LowFiParticleSystem {
    static readonly DEFAULT_PARTICLE_COUNT = 33;
    static readonly DEFAULT_SPEED = 1;
    static readonly DEFAULT_CHROMATIC = 1;
    static readonly DEFAULT_PIXELATION = 1;
    static readonly SATURATION_MULTIPLIER = 0.3;
    static readonly TARGET_FPS = 60;
    static readonly MOUSE_INTERACTION_RADIUS = 1600;
    static readonly EXPLOSION_RADIUS = 2500;
    static readonly VELOCITY_LIMIT = 8;
    static readonly FRICTION = 0.98;
    static readonly BOUNCE_DAMPING = 0.8;
    static readonly SCROLL_DAMPING = 0.95;
    static readonly FADE_ALPHA = 0.1;
    static readonly PARTICLE_SIZE = 4;
    static readonly PARTICLE_MIN_LIFE = 50;
    static readonly PARTICLE_MAX_LIFE = 150;
    static readonly SCANLINE_INTERVAL = 4;
    static readonly SCANLINE_HEIGHT = 2;
    static readonly MULTIPLY_ALPHA = 0.95;

    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D;
    private particles: Array<{
      x: number;
      y: number;
      vx: number;
      vy: number;
      size: number;
      hue: number;
      life: number;
      maxLife: number;
    }>;
    private mouse: { x: number; y: number };
    private isMouseDown: boolean;
    private isRightClick: boolean;
    private frameInterval: number;
    private lastTime: number;
    private deltaTime: number;
    private particleCount: number;
    private speed: number;
    private chromatic: number;
    private pixelation: number;
    private width: number;
    private height: number;
    private scrollY: number;
    private lastScrollY: number;
    private scrollVelocity: number;
    private scrollAcceleration: { x: number; y: number };
    private scrollDamping: number;
    private lowResCanvas: HTMLCanvasElement | null;
    private lowResCtx: CanvasRenderingContext2D | null;
    private lowResWidth: number;
    private lowResHeight: number;
    private redCanvas: HTMLCanvasElement | null;
    private greenCanvas: HTMLCanvasElement | null;
    private blueCanvas: HTMLCanvasElement | null;
    private redCtx: CanvasRenderingContext2D | null;
    private greenCtx: CanvasRenderingContext2D | null;
    private blueCtx: CanvasRenderingContext2D | null;

    constructor() {
      const canvas = document.getElementById(
        "particle-canvas"
      ) as HTMLCanvasElement;
      if (!canvas) {
        throw new Error("Canvas element not found");
      }

      this.canvas = canvas;
      const ctx = this.canvas.getContext("2d");
      if (!ctx) {
        throw new Error("2D context not available");
      }
      this.ctx = ctx;

      this.particles = [];
      this.mouse = { x: 0, y: 0 };
      this.isMouseDown = false;
      this.isRightClick = false;

      this.frameInterval = 1000 / LowFiParticleSystem.TARGET_FPS;
      this.lastTime = 0;
      this.deltaTime = 0;

      this.particleCount = LowFiParticleSystem.DEFAULT_PARTICLE_COUNT;
      this.speed = LowFiParticleSystem.DEFAULT_SPEED;
      this.chromatic = LowFiParticleSystem.DEFAULT_CHROMATIC;
      this.pixelation = LowFiParticleSystem.DEFAULT_PIXELATION;

      this.width = 0;
      this.height = 0;
      this.scrollY = 0;
      this.lastScrollY = 0;
      this.scrollVelocity = 0;
      this.scrollAcceleration = { x: 0, y: 0 };
      this.scrollDamping = LowFiParticleSystem.SCROLL_DAMPING;

      this.lowResCanvas = null;
      this.lowResCtx = null;
      this.lowResWidth = 0;
      this.lowResHeight = 0;
      this.redCanvas = null;
      this.greenCanvas = null;
      this.blueCanvas = null;
      this.redCtx = null;
      this.greenCtx = null;
      this.blueCtx = null;

      this.init();
      this.setupEventListeners();
      this.animate(0);
    }

    private init(): void {
      this.resize();
      this.createLowResBuffer();
      this.createColorChannels();
      this.createParticles();
    }

    private resize(): void {
      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;
      this.width = this.canvas.width;
      this.height = this.canvas.height;

      if (this.width > 0 && this.height > 0) {
        this.createLowResBuffer();
        this.createColorChannels();
      }
    }

    private createLowResBuffer(): void {
      this.lowResWidth = Math.max(1, Math.floor(this.width / this.pixelation));
      this.lowResHeight = Math.max(
        1,
        Math.floor(this.height / this.pixelation)
      );

      this.lowResCanvas = document.createElement("canvas");
      this.lowResCanvas.width = this.lowResWidth;
      this.lowResCanvas.height = this.lowResHeight;

      const ctx = this.lowResCanvas.getContext("2d");
      if (!ctx) {
        throw new Error("Low resolution context not available");
      }
      this.lowResCtx = ctx;
      this.lowResCtx.imageSmoothingEnabled = false;
      this.ctx.imageSmoothingEnabled = false;
    }

    private createColorChannels(): void {
      this.redCanvas = document.createElement("canvas");
      this.greenCanvas = document.createElement("canvas");
      this.blueCanvas = document.createElement("canvas");

      this.redCanvas.width = this.lowResWidth;
      this.redCanvas.height = this.lowResHeight;
      this.greenCanvas.width = this.lowResWidth;
      this.greenCanvas.height = this.lowResHeight;
      this.blueCanvas.width = this.lowResWidth;
      this.blueCanvas.height = this.lowResHeight;

      const redCtx = this.redCanvas.getContext("2d");
      const greenCtx = this.greenCanvas.getContext("2d");
      const blueCtx = this.blueCanvas.getContext("2d");

      if (!redCtx || !greenCtx || !blueCtx) {
        throw new Error("Color channel contexts not available");
      }

      this.redCtx = redCtx;
      this.greenCtx = greenCtx;
      this.blueCtx = blueCtx;

      this.redCtx.imageSmoothingEnabled = false;
      this.greenCtx.imageSmoothingEnabled = false;
      this.blueCtx.imageSmoothingEnabled = false;
    }

    private createParticles(): void {
      this.particles = [];

      for (let i = 0; i < this.particleCount; i++) {
        this.particles.push({
          x: Math.random() * this.lowResWidth,
          y: Math.random() * this.lowResHeight,
          vx: (Math.random() - 0.5) * 2,
          vy: (Math.random() - 0.5) * 2,
          size: LowFiParticleSystem.PARTICLE_SIZE,
          hue: Math.random() * 360,
          life: 1,
          maxLife:
            Math.random() * LowFiParticleSystem.PARTICLE_MAX_LIFE +
            LowFiParticleSystem.PARTICLE_MIN_LIFE,
        });
      }
    }

    private updateScrollEffect(): void {
      const currentScrollY = window.scrollY || window.pageYOffset;
      const scrollDelta = currentScrollY - this.lastScrollY;
      this.scrollVelocity = scrollDelta;
      this.lastScrollY = currentScrollY;

      const scrollForce = Math.abs(this.scrollVelocity) * 0.5;
      const scrollDirection = this.scrollVelocity > 0 ? -1 : 1;

      this.scrollAcceleration.y = scrollDirection * scrollForce * 0.1;
      this.scrollAcceleration.x = (Math.random() - 0.5) * scrollForce * 0.05;

      this.scrollAcceleration.x *= this.scrollDamping;
      this.scrollAcceleration.y *= this.scrollDamping;
    }

    private updateParticles(deltaTime: number): void {
      this.updateScrollEffect();

      const mouseX = this.mouse.x / this.pixelation;
      const mouseY = this.mouse.y / this.pixelation;
      const normalizedDelta =
        deltaTime / (1000 / LowFiParticleSystem.TARGET_FPS);

      this.particles.forEach((particle) => {
        particle.vx += this.scrollAcceleration.x * normalizedDelta;
        particle.vy += this.scrollAcceleration.y * normalizedDelta;

        const dx = mouseX - particle.x;
        const dy = mouseY - particle.y;
        const distSq = dx * dx + dy * dy;

        if (distSq < LowFiParticleSystem.MOUSE_INTERACTION_RADIUS) {
          const dist = Math.sqrt(distSq);

          if (this.isRightClick) {
            const force = 20 / (dist + 1);
            particle.vx += dx * force * 0.01 * normalizedDelta;
            particle.vy += dy * force * 0.01 * normalizedDelta;
          } else if (this.isMouseDown) {
            const force = 100 / (dist + 1);
            particle.vx -= dx * force * 0.01 * normalizedDelta;
            particle.vy -= dy * force * 0.01 * normalizedDelta;
          } else {
            const force = 30 / (dist + 1);
            particle.vx -= dx * force * 0.005 * normalizedDelta;
            particle.vy -= dy * force * 0.005 * normalizedDelta;
          }
        }

        const speed = Math.sqrt(
          particle.vx * particle.vx + particle.vy * particle.vy
        );
        if (speed > LowFiParticleSystem.VELOCITY_LIMIT) {
          particle.vx =
            (particle.vx / speed) * LowFiParticleSystem.VELOCITY_LIMIT;
          particle.vy =
            (particle.vy / speed) * LowFiParticleSystem.VELOCITY_LIMIT;
        }

        particle.vx *= Math.pow(LowFiParticleSystem.FRICTION, normalizedDelta);
        particle.vy *= Math.pow(LowFiParticleSystem.FRICTION, normalizedDelta);

        particle.x += particle.vx * this.speed * normalizedDelta;
        particle.y += particle.vy * this.speed * normalizedDelta;

        if (particle.x < 0 || particle.x > this.lowResWidth) {
          particle.vx *= -LowFiParticleSystem.BOUNCE_DAMPING;
          particle.x = Math.max(0, Math.min(this.lowResWidth, particle.x));
        }
        if (particle.y < 0 || particle.y > this.lowResHeight) {
          particle.vy *= -LowFiParticleSystem.BOUNCE_DAMPING;
          particle.y = Math.max(0, Math.min(this.lowResHeight, particle.y));
        }

        particle.life -= normalizedDelta;
        if (particle.life <= 0) {
          particle.x = Math.random() * this.lowResWidth;
          particle.y = Math.random() * this.lowResHeight;
          particle.vx = (Math.random() - 0.5) * 2;
          particle.vy = (Math.random() - 0.5) * 2;
          particle.hue = Math.random() * 360;
          particle.life = particle.maxLife;
        }

        if (Math.abs(this.scrollVelocity) > 5) {
          particle.hue =
            (particle.hue + Math.abs(this.scrollVelocity) * 0.5) % 360;
        }
      });
    }

    private drawParticles(): void {
      if (!this.lowResCtx || !this.redCtx || !this.greenCtx || !this.blueCtx)
        return;

      this.lowResCtx.fillStyle = `rgba(0, 0, 0, ${LowFiParticleSystem.FADE_ALPHA})`;
      this.lowResCtx.fillRect(0, 0, this.lowResWidth, this.lowResHeight);

      this.redCtx.fillStyle = `rgba(0, 0, 0, ${LowFiParticleSystem.FADE_ALPHA})`;
      this.redCtx.fillRect(0, 0, this.lowResWidth, this.lowResHeight);

      this.greenCtx.fillStyle = `rgba(0, 0, 0, ${LowFiParticleSystem.FADE_ALPHA})`;
      this.greenCtx.fillRect(0, 0, this.lowResWidth, this.lowResHeight);

      this.blueCtx.fillStyle = `rgba(0, 0, 0, ${LowFiParticleSystem.FADE_ALPHA})`;
      this.blueCtx.fillRect(0, 0, this.lowResWidth, this.lowResHeight);

      this.particles.forEach((particle) => {
        const alpha = (particle.life * 0.3) / particle.maxLife;
        const brightness = Math.min(100, 50 + alpha * 50);

        const x = Math.floor(particle.x);
        const y = Math.floor(particle.y);
        const size = Math.max(1, Math.floor(particle.size));

        const hsl = this.hslToRgb(
          particle.hue / 360,
          LowFiParticleSystem.SATURATION_MULTIPLIER,
          brightness / 100
        );

        if (
          this.redCtx === null ||
          this.greenCtx === null ||
          this.blueCtx === null
        )
          return;
        this.redCtx.fillStyle = `rgba(${hsl.r}, 0, 0, ${alpha})`;
        this.redCtx.fillRect(x, y, size, size);

        this.greenCtx.fillStyle = `rgba(0, ${hsl.g}, 0, ${alpha})`;
        this.greenCtx.fillRect(x, y, size, size);

        this.blueCtx.fillStyle = `rgba(0, 0, ${hsl.b}, ${alpha})`;
        this.blueCtx.fillRect(x, y, size, size);
      });
    }

    private hslToRgb(
      h: number,
      s: number,
      l: number
    ): { r: number; g: number; b: number } {
      let r: number, g: number, b: number;

      if (s === 0) {
        r = g = b = l;
      } else {
        const hue2rgb = (p: number, q: number, t: number): number => {
          if (t < 0) t += 1;
          if (t > 1) t -= 1;
          if (t < 1 / 6) return p + (q - p) * 6 * t;
          if (t < 1 / 2) return q;
          if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
          return p;
        };

        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
      }

      return {
        r: Math.round(r * 255),
        g: Math.round(g * 255),
        b: Math.round(b * 255),
      };
    }

    private applyChromaticAberration(): void {
      if (
        !this.redCanvas ||
        !this.greenCanvas ||
        !this.blueCanvas ||
        this.redCanvas.width === 0 ||
        this.redCanvas.height === 0
      ) {
        return;
      }

      const bgGradient = this.ctx.createRadialGradient(
        this.width / 2,
        this.height / 2,
        0,
        this.width / 2,
        this.height / 2,
        Math.max(this.width, this.height) / 2
      );
      bgGradient.addColorStop(0, "#1a1a3e");
      bgGradient.addColorStop(0.3, "#0f0f2a");
      bgGradient.addColorStop(0.7, "#000");
      bgGradient.addColorStop(1, "#000");

      this.ctx.fillStyle = bgGradient;
      this.ctx.fillRect(0, 0, this.width, this.height);

      const scrollIntensity = Math.min(Math.abs(this.scrollVelocity) * 0.2, 5);
      const offset = this.chromatic + scrollIntensity;

      this.ctx.globalCompositeOperation = "lighten";

      this.ctx.drawImage(
        this.redCanvas,
        -offset,
        -offset,
        this.width,
        this.height
      );
      this.ctx.drawImage(
        this.greenCanvas,
        -offset * 0.5,
        offset * 0.5,
        this.width,
        this.height
      );
      this.ctx.drawImage(this.blueCanvas, offset, 0, this.width, this.height);

      this.ctx.globalCompositeOperation = "multiply";
      this.ctx.globalAlpha = LowFiParticleSystem.MULTIPLY_ALPHA;
      this.ctx.fillStyle = `rgba(0, 0, 0, ${LowFiParticleSystem.FADE_ALPHA})`;
      for (
        let i = 0;
        i < this.height;
        i += LowFiParticleSystem.SCANLINE_INTERVAL
      ) {
        this.ctx.fillRect(
          0,
          i,
          this.width,
          LowFiParticleSystem.SCANLINE_HEIGHT
        );
      }

      this.ctx.globalCompositeOperation = "source-over";
      this.ctx.globalAlpha = 1;
    }

    private explode(x: number, y: number): void {
      const lowX = x / this.pixelation;
      const lowY = y / this.pixelation;

      this.particles.forEach((particle) => {
        const dx = lowX - particle.x;
        const dy = lowY - particle.y;
        const distSq = dx * dx + dy * dy;

        if (distSq < LowFiParticleSystem.EXPLOSION_RADIUS) {
          const dist = Math.sqrt(distSq);
          const force = (50 - dist) * 0.3;
          particle.vx -= dx * force * 0.1;
          particle.vy -= dy * force * 0.1;
          particle.hue = (particle.hue + Math.random() * 60) % 360;
        }
      });
    }

    private setupEventListeners(): void {
      document.addEventListener("mousemove", (e) => {
        this.mouse.x = e.clientX;
        this.mouse.y = e.clientY;
      });

      document.addEventListener("mousedown", (e) => {
        if (e.button === 0) {
          this.isMouseDown = true;
          this.explode(e.clientX, e.clientY);
        } else if (e.button === 2) {
          this.isRightClick = true;
        }
      });

      document.addEventListener("mouseup", () => {
        this.isMouseDown = false;
        this.isRightClick = false;
      });

      document.addEventListener("contextmenu", (e) => {
        e.preventDefault();
      });

      window.addEventListener("resize", () => {
        this.resize();
      });

      window.addEventListener("scroll", () => {}, { passive: true });
    }

    private animate(currentTime: number): void {
      const elapsed = currentTime - this.lastTime;

      if (elapsed >= this.frameInterval) {
        this.deltaTime = elapsed;
        this.lastTime = currentTime - (elapsed % this.frameInterval);

        if (
          this.width > 0 &&
          this.height > 0 &&
          this.lowResWidth > 0 &&
          this.lowResHeight > 0
        ) {
          this.updateParticles(this.deltaTime);
          this.drawParticles();
          this.applyChromaticAberration();
        }
      }

      requestAnimationFrame((time) => this.animate(time));
    }
  }

  new LowFiParticleSystem();
</script>
